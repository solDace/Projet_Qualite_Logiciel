{
	"info": {
		"_postman_id": "fce289a4-31b9-487e-b141-452e593f4a59",
		"name": "Les rongeurs vers la GLOire!",
		"description": "La liste des endpoints pour vos tests!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31250954",
		"_collection_link": "https://galactic-station-425124.postman.co/workspace/Team-Workspace~f5a4ed20-e1b1-4283-8082-67b97850756f/collection/30314241-fce289a4-31b9-487e-b141-452e593f4a59?action=share&source=collection_link&creator=31250954"
	},
	"item": [
		{
			"name": "Erreurs HTTP",
			"item": [
				{
					"name": "4XX CLIENT ERROR",
					"item": [
						{
							"name": "400 BAD REQUEST",
							"item": [
								{
									"name": "Ajouter un rongeur (400 - INVALID_NAME)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_NAME'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_NAME\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Invalid name.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Invalid name.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": \"{{CHARACTER_STARTING_SALARY}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajouter un rongeur (400 - INVALID_TYPE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_TYPE'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_TYPE\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Invalid type.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Invalid type.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"salary\": \"{{CHARACTER_STARTING_SALARY}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajouter un rongeur (400 - INVALID_SALARY)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_SALARY'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_SALARY\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Salary must be > 0.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Salary must be > 0.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajouter une action code invalide",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_ACTION_CODE'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_ACTION_CODE\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'The action code is invalid.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"The action code is invalid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_BOB}}\", \r\n  \"to\": \"{{CHARACTER_NAME_ALICE}}\",\r\n  \"actionCode\": \"PDA\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajouter une action avec code null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_ACTION_CODE'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_ACTION_CODE\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'The action code is invalid.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"The action code is invalid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_BOB}}\", \r\n  \"to\": \"{{CHARACTER_NAME_ALICE}}\",\r\n  \"actionCode\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajouter une action avec code vide",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_ACTION_CODE'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_ACTION_CODE\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'The action code is invalid.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"The action code is invalid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_BOB}}\", \r\n  \"to\": \"{{CHARACTER_NAME_ALICE}}\",\r\n  \"actionCode\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								}
							],
							"description": "C'est ici qu'on test tous les codes d'erreurs que le client peut causer en envoyant des mauvais paramètres.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"    url: 'localhost:8181/reset',",
											"    method: 'POST'",
											"}, function (err, res) {",
											"    // Rien à faire",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "404 NOT FOUND",
							"item": [
								{
									"name": "Obtenir les informations une fois le personnage dans le jeu",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"{{CHARACTER_NAME_BOB}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Réseau social (Hamstagram)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Réseau RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"{{CHARACTER_NAME_ALICE}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "C'est ici qu'on test tous les codes d'erreurs que le client peut demander des ressources qui n'existent pas!",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"    url: 'localhost:8181/reset',",
											"    method: 'POST'",
											"}, function (err, res) {",
											"    // Rien à faire",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "C'est ici qu'on test tous les codes d'erreurs que le client peut causer en utilisant notre API.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "C'est ici qu'on test tous les codes d'erreurs que l'on peut possiblement envoyer au client!\n\ntest pull"
		},
		{
			"name": "Stories",
			"item": [
				{
					"name": "1. TURN - Tour et reset",
					"item": [
						{
							"name": "Exécuter le tour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"La réponse est un JSON.\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"\r",
											"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
											"    //parse the response JSON and test three properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								},
								"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
							},
							"response": []
						},
						{
							"name": "Reinitialiser le jeu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
											"    pm.response.to.be.ok;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exécuter le tour 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"La réponse est un JSON.\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"\r",
											"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
											"    //parse the response JSON and test three properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equals(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								},
								"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
							},
							"response": []
						}
					],
					"description": "**Conditions de succès:**\n\n1. Avant un tour, toutes les actions à exécuter pendant le tour sont accumulées.\n    \n2. Lors d’un tour, toutes les actions accumulées sont exécutées.\n    \n3. Après l’exécution d’un tour, la liste des actions à exécuter au prochain tour est vide.\n    \n4. On conclut chaque tour en applicant les conséquences du tour.\n    \n5. La réponse de l’exécution d’un tour doit contenir le numéro du tour en question.\n    \n6. Après avoir été resetted, le jeu doit être au premier tour.\n    \n7. Après un reset, tout ce qui a été créé/ajouté est effacé."
				},
				{
					"name": "2. RON - Ajouter des personnages et réseaux sociaux",
					"item": [
						{
							"name": "Exemple 1 - Ajout de personnage",
							"item": [
								{
									"name": "Ajout de Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Not found car le tour n’a pas encore été joué",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Retourne les informations de Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 75.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75);\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1000.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							],
							"description": "On execute ici l'exemple 1 EXATEMENT comme il est présenté dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/stories/story2_ron/](https://projet2023.qualitelogicielle.ca/stories/story2_ron/)):\n\n- POST `/characters` => Ajout de Bob.\n- GET `/characters/Bob` => Not found car le tour n’a pas encore été joué.\n- POST `/turn`\n- GET `/characters/Bob` => Retourne les informations de Bob.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Exemple 2 - Ajout de personnage avec le même nom qu’un autre et un nouveau salaire",
							"item": [
								{
									"name": "Ajout de Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Ajout de Bob avec nouveau salaire",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 2000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Retourner les informations de Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 69.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(69);\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 900.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(900);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										}
									},
									"response": []
								}
							],
							"description": "On execute ici l'exemple 2 EXATEMENT comme il est présenté dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/stories/story2_ron/](https://projet2023.qualitelogicielle.ca/stories/story2_ron/)):\n\n- POST `/characters` => Ajout de Bob.\n    \n- POST `/turn`\n    \n- POST `/characters` => Ajout de Bob.\n- POST `/turn` => L’ajout du 2e rongeur Bob sera ignoré",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Exemple 3 - Ajout de personnage avec le même nom qu’un autre",
							"item": [
								{
									"name": "Ajout de Bob le hamster",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Bob le rat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 2000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Executer le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "L’ajout du 2e rongeur Bob sera ignoré",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 75.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75);\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1000.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										}
									},
									"response": []
								}
							],
							"description": "On execute ici l'exemple 3 EXATEMENT comme il est présenté dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/stories/story2_ron/](https://projet2023.qualitelogicielle.ca/stories/story2_ron/)):\n\n- POST `/characters` => Ajout de Bob.\n    \n- POST `/characters` => Ajout de Bob.\n- POST `/turn` => L’ajout du 2e rongeur Bob sera ignoré.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Ajouts/modifications à la story 1",
							"item": [
								{
									"name": "Ajout de Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Retourne les informations de Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 75.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75);\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1000.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Retourne les informations du compte Hamstagram Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'username' et sa valeur est 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equals(10000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob a perdu 100$ et 6 points de reputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 69.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(69);\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 900.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(900);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a perdu 600 followers Hamstagram",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'username' et sa valeur est 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equals(10000 - 600);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							]
						}
					],
					"description": "## Ajout des personnages\n\nDans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n- Les chinchillas, qui sont les agents des acteurs.\n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000.\n\n## Réseaux sociaux\n\nDès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés.\n\n## Règlements\n\nSi un rongeur…\n\n- Passe sous la barre des 15 pts (< 15) de réputation OU\n- Passe sous la barre des 1000 (< 1000) followers OU\n- N’a plus d’argent (bankBalance <= 0)\n    \n\nAlors au prochain tour, le rongeur sera effacé du jeu ainsi que tout ce qui le concerne (ex. compte réseau social)."
				},
				{
					"name": "3. TRA - Contacts et travail",
					"item": [
						{
							"name": "Exemple - Ajout d’un agent et d’un acteur sur Hamstagram",
							"item": [
								{
									"name": "1. Créer Bob l’agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "2. Créer Joe l’acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "3. Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "4. Bob l’agent a Joe l’acteur dans son payload Hamstagram \"represent\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est égale à 'Joe'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Joe\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Joe est \"representedBy\" Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal('Bob');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Joe"
											]
										}
									},
									"response": []
								}
							],
							"description": "- POST `/characters` => Créer Bob l’agent\n    \n- POST `/characters` => Créer Joe l’acteur\n    \n- POST `/turn`\n    \n- GET `/hamstagram/Bob` => Bob l’agent a Joe l’acteur dans son payload Hamstagram `represent`\n    \n- GET `/hamstagram/Joe` => Joe est `representedBy` Bob",
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Exemple 1 sur l’Hamstrologie",
							"item": [
								{
									"name": "Ajout de Bob l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de John l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"John\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Rob l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Rob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Hamstagram Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'John'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"John\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hamstagram John",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'represent' et sa valeur contient 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Bob\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/John",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"John"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hamstagram Rob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est vide.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Rob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Rob"
											]
										}
									},
									"response": []
								}
							],
							"description": "L’acteur Bob a reçu des offres des agents John et Rob. Il choisira donc  \nJohn et refusera l’offre de Rob (J plus proche de B que de R)."
						},
						{
							"name": "Exemple 2 sur l’Hamstrologie",
							"item": [
								{
									"name": "Ajout de l'actrice Suzanne",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Suzanne\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Rob l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Rob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de John l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"John\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Hamstagram Suzanne",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Rob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Rob\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Suzanne",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Suzanne"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hamstagram John",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'represent' et c'est un array vide.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/John",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"John"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hamstagram Rob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'represent' et c'est un array qui contient la valeur est Suzanne.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Suzanne\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Rob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Rob"
											]
										}
									},
									"response": []
								}
							],
							"description": "Suzanne l’actrice reçoit une offre de John et Rob, elle choisira Rob."
						},
						{
							"name": "Exemple - Les avocats et les agents apparaissent sur RattedIn après que le tour soit joué.",
							"item": [
								{
									"name": "Créer Bob l’agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Le compte RattedIn  de Bob n'existe pas encore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"La réponse est un JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"})",
													"",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");",
													"});",
													"",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Le compte RattedIn de Bob est retrouve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"La réponse possède 'username' fixee a 'Bob'.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");",
													"});",
													"",
													"pm.test(\"La réponse possède la propriété 'status' N/A.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"N/A\");",
													"});",
													"",
													"pm.test(\"Bob n'a aucun contact.\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								}
							],
							"description": "- POST `/characters` => Créer Bob l’agent\n    \n- GET `/rattedin/Bob` => Not found\n    \n- POST `/turn`\n    \n- GET `/rattedin/Bob` => OK 200"
						},
						{
							"name": "Exemple - Les demandes de contact ne sont acceptées/refusées que lorsqu’un tour est joué.",
							"item": [
								{
									"name": "Créer Bob l’avocat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Créer Zoe l’avocat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Zoe\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number'égal à 1.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Zoe fait une demande de contact à Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"Zoe\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/rattedin/Bob/request",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Bob n’est pas encore dans les contacts de Zoe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"La réponse possède la 'username' fixee a 'Zoe'.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Zoe\");",
													"});",
													"",
													"pm.test(\"La réponse possède la propriété 'status' openToWork.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");",
													"});",
													"",
													"pm.test(\"Zoe n'est pas en contact avec Bob.\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").not.contains(\"Bob\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Zoe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Zoe"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' égal à 2.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob a Zoe dans ses contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"La réponse possède la 'username' fixee a 'Bob'.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");",
													"});",
													"",
													"pm.test(\"La réponse possède la propriété 'status' openToWork.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");",
													"});",
													"",
													"pm.test(\"Bob est en contact avec Zoe.\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Zoe\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Zoe a Bob dans ses contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"La réponse possède la 'username' fixee a 'Zoe'.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Zoe\");",
													"});",
													"",
													"pm.test(\"La réponse possède la propriété 'status' openToWork.\", () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");",
													"});",
													"",
													"pm.test(\"Zoe est en contact avec Bob.\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Bob\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Zoe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Zoe"
											]
										}
									},
									"response": []
								}
							],
							"description": "- POST `/characters` => Créer Bob l’avocat\n    \n- POST `/characters` => Créer Zoe l’avocat\n    \n- POST `/turn`\n    \n- POST `/rattedin/Bob/request` => Zoe fait une demande de contact à Bob\n    \n- GET `/rattedin/Bob` => Bob n’est pas encore dans les contacts de Zoe\n    \n- POST `/turn`\n    \n- GET `/rattedin/Bob` => Bob a Zoe dans ses contacts\n    \n- GET `/rattedin/Zoe` => Zoe a Bob dans ses contacts"
						}
					]
				},
				{
					"name": "4. FILM - Ajouter des films",
					"item": [
						{
							"name": "Exemple 1 - Ajout de plusieurs films",
							"item": [
								{
									"name": "1. Ajout du movie Rats of the Caribbean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "2. Ajout du movie Ratatouille",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Ratatouille\",\r\n  \"type\": \"A\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "3. Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "4. Le film Rats of the Caribbean est ajouté et le film Ratatouille est ignoré",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le film est créé!\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Rats of the Caribbean\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							]
						},
						{
							"name": "Exemple 2 - Ajout de film et d’acteurs, salaire et bonus",
							"item": [
								{
									"name": "1. Ajout de Joe l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "2. Ajout de Bob l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1500\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "3. Ajout du movie Ratman",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "4. Le film n'est pas encore ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le film n'a pas été créé\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).to.be.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "5. Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "6. Le film Ratman est ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "7. Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "8. Le film est en période d’auditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse doit contenir tous ces attributs.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "9. Exécuter le tour 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "10. Le film est en tournage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse doit contenir tous ces attributs.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "11. Exécuter le tour 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "12. Le film est à l’affiche",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "13. Joe a reçu son salaire dans bankBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Joe'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a reçu son salaire son salaire de 1000$.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    var balance = 700;\r",
													"    var salary = 1000;\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(balance + salary);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "14. Bob a reçu son salaire dans bankBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a reçu son salaire son salaire de 1500$.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    var balance = 700;\r",
													"    var salary = 1500;\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(balance + salary);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "15. Exécuter le tour 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "16. Les gains au box office [...]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    var totalNbFollowers = 7600 * 2;\r",
													"    var boxOffice = 500000 + totalNbFollowers * 10;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(boxOffice);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "StartFragmentLes gains au box office sont affichés selon le nombre d’abonnés de Joe  \net Bob pour ce tour (donc moins les 600 abonnés perdus/tour)  \n(`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: X)EndFragment"
									},
									"response": []
								},
								{
									"name": "17. Exécuter le tour 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "18. Joe a reçu son bonus dans bankBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Joe'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a reçu son bonus.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    var balance = 1500.0;\r",
													"    var totalNbFollowers = 7600 * 2;\r",
													"    var boxOffice = 500000 + (totalNbFollowers * 10);\r",
													"    var bonus = boxOffice * 0.05;\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(balance + bonus);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "19.  Bob a reçu son bonus dans bankBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a reçu son bonus.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    var balance = 2000;\r",
													"    var totalNbFollowers = 7600 * 2;\r",
													"    var boxOffice = 500000 + (totalNbFollowers * 10);\r",
													"    var bonus = boxOffice * 0.05;\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(balance + bonus);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							]
						},
						{
							"name": "Exemple 3 - Ajout de film et d’acteurs",
							"item": [
								{
									"name": "1. Ajout du movie The Lord of the Chinchillas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"The Lord of the Chinchillas\",\r\n  \"type\": \"A\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "2. Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "3. Le film est ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le film est créé!\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Lord of the Chinchillas\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "4. Bob l’acteur est ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1500\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "5. Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "6. Le film est en période d’auditions, mais Bob le nouveau personnage acteur ne peut pas auditionner encore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la requête contient bien ces éléments.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Lord of the Chinchillas\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "7. Exécuter le tour 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "8.  Le film est en période d’auditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la requête contient bien ces éléments.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Lord of the Chinchillas\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "9. Joe l’acteur est ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "10. Exécuter le tour 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "11. Le film est en période d’auditions, mais Joe le nouveau personnage acteur ne peut pas auditionner encore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la requête contient bien ces éléments.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Lord of the Chinchillas\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "12. Exécuter le tour 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "13. Le film est en période d’auditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la requête contient bien ces éléments.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Lord of the Chinchillas\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "14. Exécuter le tour 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "15. Le film est en tournage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la requête contient bien ces éléments.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Lord of the Chinchillas\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							],
							"description": "- POST `/movies` => Ajout du film The Lord of the Chinchillas\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film est ajouté (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/characters` => Bob l’acteur est ajouté\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film est en période d’auditions, mais Bob le nouveau personnage acteur ne peut pas auditionner encore (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film est en période d’auditions (`potentialCasting`: \\[“Bob”\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/characters` => Joe l’acteur est ajouté\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film est en période d’auditions, mais Joe le nouveau personnage acteur ne peut pas auditionner encore (`potentialCasting`: \\[“Bob”\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film est en période d’auditions (`potentialCasting`: \\[“Bob”, “Joe”\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film est en tournage (`potentialCasting`: \\[\\], `casting`: \\[“Bob”, “Joe”\\], `boxOffice`: 0)"
						},
						{
							"name": "Exemple 4 - Plusieurs films et plusieurs acteurs",
							"item": [
								{
									"name": "0. Ajout de Joe l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "0. Ajout de Bob l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 11\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "0. Ajout de Jane l'actrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Jane\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 12\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "0. Ajout de Sylvie l'actrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Sylvie\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 13\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "0. Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "1. Ajout du film Chin City (type B)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "2. Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "3. Le film Chin City ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Le film est créé\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "4. Ajout du film Les dents des rongeurs (type B)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Les dents des rongeurs\",\r\n  \"type\": \"B\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "5. Exécuter le tour 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "6. Chin City en auditions, Les dents des rongeurs ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    var chinCity = null;\r",
													"    var dentDesRongeurs = null;\r",
													"\r",
													"    for (var i = 0; i < responseJson.length; i++) {\r",
													"        if(responseJson[i].title == \"Chin City\") {\r",
													"            chinCity = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
													"            dentDesRongeurs = responseJson[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Sylvie\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "7. Exécuter le tour 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "8. Chin City en tournage, Les dents des rongeurs en auditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    var chinCity = null;\r",
													"    var dentDesRongeurs = null;\r",
													"\r",
													"    for (var i = 0; i < responseJson.length; i++) {\r",
													"        if(responseJson[i].title == \"Chin City\") {\r",
													"            chinCity = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
													"            dentDesRongeurs = responseJson[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Sylvie\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "9. Ajout du film The Hamster Games (type A)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"The Hamster Games\",\r\n  \"type\": \"A\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "10. Exécuter le tour 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "11. Chin City à l'affiche, Les dents des rongeurs en tournage, The Hamster Games ajouté",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    var chinCity = null;\r",
													"    var dentDesRongeurs = null;\r",
													"    var hamsterGames = null;\r",
													"\r",
													"    for (var i = 0; i < responseJson.length; i++) {\r",
													"        if(responseJson[i].title == \"Chin City\") {\r",
													"            chinCity = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
													"            dentDesRongeurs = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"The Hamster Games\") {\r",
													"            hamsterGames = responseJson[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Jane\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Sylvie\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Hamster Games\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "12. Exécuter le tour 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "13. Chin City au box office, Les dents des rongeurs à l'affiche, The Hamster Games en auditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    var chinCity = null;\r",
													"    var dentDesRongeurs = null;\r",
													"    var hamsterGames = null;\r",
													"\r",
													"    for (var i = 0; i < responseJson.length; i++) {\r",
													"        if(responseJson[i].title == \"Chin City\") {\r",
													"            chinCity = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
													"            dentDesRongeurs = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"The Hamster Games\") {\r",
													"            hamsterGames = responseJson[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    var totalNbFollowers = 7000 * 2;\r",
													"    var boxOffice = 500000 + totalNbFollowers * 10;\r",
													"\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
													"\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
													"\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Hamster Games\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Sylvie\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "14. Exécuter le tour 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(7);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "15. Chin City inchangé, Les dents des rongeurs au box office, The Hamster Games en tournage",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    var chinCity = null;\r",
													"    var dentDesRongeurs = null;\r",
													"    var hamsterGames = null;\r",
													"\r",
													"    for (var i = 0; i < responseJson.length; i++) {\r",
													"        if(responseJson[i].title == \"Chin City\") {\r",
													"            chinCity = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
													"            dentDesRongeurs = responseJson[i];\r",
													"        }\r",
													"        if(responseJson[i].title == \"The Hamster Games\") {\r",
													"            hamsterGames = responseJson[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
													"\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
													"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
													"\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Hamster Games\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
													"    pm.expect(hamsterGames).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/movies",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"movies"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							],
							"description": "- POST `/movies` => Ajout du film Chin City (type B)\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film Chin City est ajouté (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/movies` => Ajout du film Les dents des rongeurs (type B)\n    \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => en auditions (`potentialCasting`: \\[“Joe”, “Bob”, “Jane”, “Sylvie”\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n    - Les dents des rongeurs => est ajouté (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => en tournage (`potentialCasting`: \\[\\], `casting`: \\[“Joe”, “Bob”\\], `boxOffice`: 0)\n        \n    - Les dents des rongeurs => Il ne reste que Jane et Sylvie disponible en auditions (`potentialCasting`: \\[“Jane”, “Sylvie”\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n- POST `/movies` => Ajout du film The Hamster Games (type A)\n    \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => à l’affiche (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n    - Les dents des rongeurs => en tournage (`potentialCasting`: \\[\\], `casting`: \\[“Jane”, “Sylvie”\\], `boxOffice`: 0)\n        \n    - The Hamster Games est ajouté\n        \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => gains au box office (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: X)\n        \n    - Les dents des rongeurs => à l’affiche (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n    - The Hamster Games => auditions (`potentialCasting`: \\[“Joe”, “Bob”, “Jane”, “Sylvie”\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => le payload reste inchangé (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: X)\n        \n    - Les dents des rongeurs => les gains sont affichés (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: Y)\n        \n    - The Hamster Games => tournage avec Jane et Sylvie car film type A (plus grand ratio abonnés/salaire) (`potentialCasting`: \\[\\], `casting`: \\[“Jane”, “Sylvie”\\], `boxOffice`: 0)"
						}
					]
				},
				{
					"name": "5.ACT - Actions et sabotage",
					"item": [
						{
							"name": "Communs",
							"item": [
								{
									"name": "400 BAD REQUEST",
									"item": [
										{
											"name": "Ajouter une action code invalide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
															"    pm.response.to.be.badRequest;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_ACTION_CODE'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_ACTION_CODE\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'The action code is invalid.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"The action code is invalid.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_BOB}}\", \r\n  \"to\": \"{{CHARACTER_NAME_ALICE}}\",\r\n  \"actionCode\": \"PDA\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajouter une action avec code null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
															"    pm.response.to.be.badRequest;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_ACTION_CODE'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_ACTION_CODE\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'The action code is invalid.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"The action code is invalid.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_BOB}}\", \r\n  \"to\": \"{{CHARACTER_NAME_ALICE}}\",\r\n  \"actionCode\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajouter une action avec code vide",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '400 BAD REQUEST'.\", function () {\r",
															"    pm.response.to.be.badRequest;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'INVALID_ACTION_CODE'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"INVALID_ACTION_CODE\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'The action code is invalid.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"The action code is invalid.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_BOB}}\", \r\n  \"to\": \"{{CHARACTER_NAME_ALICE}}\",\r\n  \"actionCode\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										}
									],
									"description": "C'est ici qu'on test tous les codes d'erreurs que le client peut causer en envoyant des mauvais paramètres.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.sendRequest({",
													"    url: 'localhost:8181/reset',",
													"    method: 'POST'",
													"}, function (err, res) {",
													"    // Rien à faire",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "RS - Participer à une téléréalité",
							"item": [
								{
									"name": "Pour un acteur",
									"item": [
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1500\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout du movie Ratman",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Movies 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe participe téléréalité",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": null,\r\n  \"actionCode\": \"RS\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition sans Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").not.contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a gagné 50000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a gagné 50000$\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(50900);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 10 points de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 10 points de réputation.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(59);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a gagné 20000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a gagné 20000 followers.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(9400 + 20000);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition sans Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").not.contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition avec Bob et Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en tournage avec Bob et Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									],
									"description": "test\n\nl;l\n\nll"
								},
								{
									"name": "Pour un agent",
									"item": [
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob est l'agent de Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob est l'agent de Joe.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe est représenté par Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe est représenté par Bob\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob l'agent participe téléréalité",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": null,\r\n  \"actionCode\": \"RS\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob a gagné 50000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a gagné 50000$.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1000 + 50000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a perdu 10 points de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu 10 points de réputation.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(59);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a gagné 8000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a gagné 8000 followers.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000 - 600 + 8000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob n'est plus l'agent de Joe (Tour 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob n'est pas l'agent de Joe.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe n'est plus représenté par Bob (Tour 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe n'est pas représenté par Bob\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob n'est pas l'agent de Joe (Tour 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob n'est pas l'agent de Joe.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe n'est pas représenté par Bob (Tour 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe n'est pas représenté par Bob\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob est l'agent de Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob est l'agent de Joe.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe est représenté par Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe est représenté par Bob\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PO - Promouvoir un film",
							"item": [
								{
									"name": "Pour un acteur",
									"item": [
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout du movie Ratman",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 10000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 10000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(10000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 10000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 10000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(10000)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Le film est ajouté",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe promouvoit son prochain film",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": null,\r\n  \"actionCode\": \"PO\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 900$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 900$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(900);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 900$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 900$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(900);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 9400 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 9400 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(9400);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 9400 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 9400 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(9400)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film en audition avec Bob et Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition avec Bob et Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 800$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 800$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(800);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 800$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 800$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(800);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 8800 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 8800 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8800);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 8800 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 8800 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8800)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film en tournage avec Bob et Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en tournage avec Bob et Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 700$ + 100$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 800$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(800);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 700$ + 150$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 850$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(850);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 8200 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 8200 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 8200 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 8200 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8200)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film à l'affiche",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est à l'affiche\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 700$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 700$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(700);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 750$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 750$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(750);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 7600 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 7600 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 7600 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 7600 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7600)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film au BoxOffice avec Gains doublés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film au Box Office avec Gains doublés\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals((500000+(7600*2*10))*2);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 600$ + Bonus",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 600$ + Bonus (5% de 1 304 000$) dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(600 + (0.05*1304000));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 650$ + Bonus",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 650$ + Bonus (5% de 1 304 000$) dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(650 + (0.05*1304000));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 7000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 7000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 7000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 7000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7000)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(7);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										}
									],
									"description": "CECI EST UNE DESCRIPTION"
								},
								{
									"name": "Pour un agent",
									"item": [
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bernard l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bernard\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout du movie Ratman",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bernard\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bernard"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 10000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 10000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(10000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 10000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 10000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(10000)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bernard a 10000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 10000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(10000)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bernard"
													]
												}
											},
											"response": []
										},
										{
											"name": "Le film est ajouté",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard promeut son prochain film",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Bernard\", \r\n  \"to\": null,\r\n  \"actionCode\": \"PO\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 850$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 850$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(850);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 850$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 850$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(850);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bernard\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bernard"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 9400 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 9400 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(9400);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 9400 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 9400 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(9400)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bernard a 9400 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 9400 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(9400)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bernard"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film en audition avec Bob et Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition avec Bob et Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 700$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 700$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(700);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 700$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 700$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(700);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bernard\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bernard"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 8800 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 8800 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8800);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 8800 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 8800 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8800)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bernard a 8800 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 8800 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8800)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bernard"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film en tournage avec Bob et Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en tournage avec Bob et Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 650$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 650$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(650);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 700$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 700$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(700);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bernard\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bernard"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 8200 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 8200 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 8200 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 8200 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8200)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bernard a 8200 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 8200 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(8200)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bernard"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film à l'affiche",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est à l'affiche\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 500$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 500$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(500);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 550$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 550$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(550);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard a 1000$",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 1000$ dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bernard\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bernard"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 7600 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 7600 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 7600 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 7600 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7600)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bernard a 7600 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 7600 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7600)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bernard"
													]
												}
											},
											"response": []
										},
										{
											"name": "Film au BoxOffice avec Gains doublés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film au Box Office avec Gains doublés\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals((500000+(7600*3*10))*2);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a 350$ + Bonus",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 350$ + Bonus (5% de 1 456 000$) dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(350 + (0.05*1456000));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a 400$ + Bonus",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 400$ + Bonus (5% de 1 456 000$) dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(400 + (0.05*1456000));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bernard a 1000$ + Bonus",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 1000$ + Bonus (2+2% de 1 456 000$) dans son compte\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bernard\")\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").equal(1000 + (0.04*1456000));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bernard"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a 7000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a 7000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob a 7000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 7000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7000)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bernard a 7000 followers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bernard a 7000 followers\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").equal(7000)\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bernard",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bernard"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(7);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										}
									],
									"description": "CECI EST UNE DESCRIPTION"
								}
							],
							"description": "Ces tests ne sont pas possibles à exécuter selon les règles actuelles. Pour les exécuter, il faut aller modifier la précondition MOVIE_PROMOTION_FOLLOWER_THRESHOLD dans character de 15000 à 8800. Le character pourra donc exécuter cette action lors des deux premiers tours."
						},
						{
							"name": "FR - Lancer une fausse rumeur",
							"item": [
								{
									"name": "Ajout de Joe l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Bob l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 75\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout d'Alice l'avocate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Tour 1 - Réputation initiale",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe a 75 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a 75 points de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(75);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a 75 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a 75 points de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(75);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice a 75 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Alice a 75 points de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Alice\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"rat\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(75);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Alice",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Alice"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Joe gossip Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Bob gossip Alice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Alice\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Alice gossip Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Alice\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Tour 2 plusieurs rumeurs valides",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe a 64 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a 64 points de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(64);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a 64 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a 64 points de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(64);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice a 64 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Alice a 64 points de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Alice\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"rat\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(64);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Alice",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Alice"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Joe gossip Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Joe gossip Alice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Tour 3 Joe essaie 2 rumeurs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe a 58 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a 58 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(58);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a 48 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a 48 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(48);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice a 58 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Alice a 58 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Alice\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"rat\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(58);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Alice",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Alice"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob gossip Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Alice gossip Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Alice\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Tour 4 Bob et Alice attaquent Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe a 42 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a 42 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(42);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a 42 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a 42 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(42);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice a 52 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Alice a 52 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Alice\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"rat\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(52);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Alice",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Alice"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob gossip Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Tour 5  Joe reçoit 3e rumeur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe a 21 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a 21 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Joe\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"hamster\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(21);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a 36 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a 36 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(36);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice a 46 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Alice a 46 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Alice\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"rat\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(46);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Alice",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Alice"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice gossip Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Alice\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Tour 6 Joe reçoit 4e rumeur et tombe à 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe est éliminé",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Bob a 30 points de réputation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a 30 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Bob\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"chinchilla\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(30);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Alice a 40 points de réputation Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Alice a 40 points de réputation\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").equal(\"Alice\")\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"type\").equal(\"rat\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").equal(40);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Alice",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Alice"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							]
						},
						{
							"name": "SC - Révéler un scandale",
							"item": [
								{
									"name": "Pour un acteur",
									"item": [
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Alex l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Alex\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 50\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout du movie Ratman",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Movies 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Alex Révèle un scandale sur Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Alex\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition sans Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").not.contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 10 point de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 10 points de réputation\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75 - 6 - 10);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 40% de ces abonnés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 40% de ces abonnés sur hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(5640);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition sans Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").not.contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition avec Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								},
								{
									"name": "Pour un agent",
									"item": [
										{
											"name": "Ajout de Joe l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe représente Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob Révèle un scandale sur Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 10 point de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 10 points de réputation\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75 - 6 - 10);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 40% de ces abonnés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 40% de ces abonnés sur hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(5640);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe ne représente plus Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").not.contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								},
								{
									"name": "Double scandal ne déclenche qu'un seul scandal",
									"item": [
										{
											"name": "Ajout de Joe l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Alice l'avocate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 10\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe représente Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob Révèle un scandale sur Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Alice Révèle un scandale sur Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Alice\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 10 point de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 10 points de réputation\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75 - 6 - 10);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 40% de ces abonnés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 40% de ces abonnés sur hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(5640);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe ne représente plus Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").not.contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								},
								{
									"name": "Scandal mutuel",
									"item": [
										{
											"name": "Ajout de Joe l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe représente Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob Révèle un scandale sur Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Joe révèle un scandale sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 10 point de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 10 points de réputation\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75 - 6 - 10);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe a perdu 40% de ces abonnés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 40% de ces abonnés sur hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(5640);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe ne représente plus Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").not.contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob n'a pas perdu 40% de ces abonnés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob n'a pas perdu 40% de ces abonnés sur hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000 - 600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob n'a pas perdu 40 point de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu 40 points de réputation\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75 - 6);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								},
								{
									"name": "Avoir au moins 60 points pour lancer un scandale",
									"item": [
										{
											"name": "Ajout de Joe l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe représente Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob Révèle un scandale sur Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe n'a pas perdu 40 point de réputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 40 points de réputation\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75 - 4 * 6);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe n'a pas perdu 40% de ces abonnés",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a perdu 40% de ces abonnés sur hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000 - 4 * 600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe représente Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe représente Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PL - Plainte pour harcèlement",
							"item": [
								{
									"name": "La lanceur a deja joue FR",
									"item": [
										{
											"name": "Verifier les informations de Joe",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Bob",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1500\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout du movie Ratman",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Movies 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe lance FR sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition avec Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition avec Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob perd 5 points de reputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 5 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Joe lance PL sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_JOE}}\", \r\n  \"to\": \"{{CHARACTER_NAME_BOB}}\",\r\n  \"actionCode\": \"PL\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition avec Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition avec Bob.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob ne perd pas de points de reputation supplementaires",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(64 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob ne perd de followers Hamstagram supplementaires",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu 70% de ses followers.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equals(9400 - 600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Si la cible de la plainte est un acteur, retirée des films dans lesquels elle jouait ou auditionnait et ne peut pas auditionner pendant 3 tours.\n\nSi la cible de la plainte est sur Hamstagram, perte de 70% de ses abonnés Hamstagram (arrondir à l’entier le plus près, 45.2 => 46)."
								},
								{
									"name": "La cible est un acteur",
									"item": [
										{
											"name": "Verifier les informations de James",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/James",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"James"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Joe",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Bob",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de James l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"James\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout du movie Ratman",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Movies 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "James lance PL sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"James\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"PL\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Film en audition sans Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est en audition sans Bob\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Ratman\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").not.contains(\"Bob\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob perd 10 points de reputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 10 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob perd 70% de ses followers Hamstagram",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu 70% de ses followers.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    const nbFollowers = parseInt((10000 - 600) * (1 - 0.7));\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equals(nbFollowers);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob perd 6 points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 10 - 6 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												}
											},
											"response": []
										}
									],
									"description": "Si la cible de la plainte est un acteur, retirée des films dans lesquels elle jouait ou auditionnait et ne peut pas auditionner pendant 3 tours.\n\nSi la cible de la plainte est sur Hamstagram, perte de 70% de ses abonnés Hamstagram (arrondir à l’entier le plus près, 45.2 => 46)."
								},
								{
									"name": "La cible est un agent",
									"item": [
										{
											"name": "Verifier les informations de Joe",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_JOE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_JOE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Bob",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Charlie",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 15\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Charlie l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Charlie\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 15\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Bob ajoute Charlie sur RattedIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"username\" : \"Bob\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}/request",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_CHARLIE}}",
														"request"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob represente Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Joe\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a 10000 followers hamstagram.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equals(10000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob est en contact avec Charlie sur RattedIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la 'username' fixee a 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'status' N/A.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"N/A\");\r",
															"});\r",
															"\r",
															"pm.test(\"Bob est en contact avec Charlie.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Charlie\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Alice l'actrice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Alice\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Joe lance PL sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_JOE}}\", \r\n  \"to\": \"{{CHARACTER_NAME_BOB}}\",\r\n  \"actionCode\": \"PL\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob perd 10 points de reputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chinchilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 10 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob perd 70% de ses followers Hamstagram et ne represente plus personne",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu 70% de ses followers.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    const nbFollowers = parseInt((10000 - 600) * (1 - 0.7));\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equals(nbFollowers);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Bob n'est plus en contact avec Charlie sur RattedIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la 'username' fixee a 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'status' N/A.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"N/A\");\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu ses contacts.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob perd 6 points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chinchilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 10 - 6 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Si la cible de la plainte est un agent, perte de ses clients et ne peut pas faire de demande pendant 3 tours.\n\nSi la cible de la plainte est sur Hamstagram, perte de 70% de ses abonnés Hamstagram (arrondir à l’entier le plus près, 45.2 => 46).\n\nSi la cible de la plainte est sur RattedIn, perte de tous ses contacts."
								},
								{
									"name": "La cible est un avocat",
									"item": [
										{
											"name": "Verifier les informations de Joe",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_JOE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_JOE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Bob",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verifier les informations de Charlie",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Charlie l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Charlie\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 15\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 15\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Bob ajoute Charlie sur RattedIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"username\" : \"Bob\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}/request",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_CHARLIE}}",
														"request"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob est en contact avec Charlie sur RattedIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la 'username' fixee a 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'status' openToWork.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");\r",
															"});\r",
															"\r",
															"pm.test(\"Bob est en contact avec Charlie.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Charlie\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Joe lance PL sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"{{CHARACTER_NAME_JOE}}\", \r\n  \"to\": \"{{CHARACTER_NAME_BOB}}\",\r\n  \"actionCode\": \"PL\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob perd 10 points de reputation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chinchilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 10 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob n'est plus en contact avec Charlie sur RattedIn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la 'username' fixee a 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'status' N/A.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a perdu ses contacts.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Bob perd encore 6 points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chinchilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equals(75 - 10 - 6 - 6);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Si la cible de la plainte est sur RattedIn, perte de tous ses contacts."
								}
							],
							"description": "Ne jamais avoir lancé de fausse rumeur auparavant."
						}
					]
				},
				{
					"name": "6. POUR - Poursuites judiciaires",
					"item": [
						{
							"name": "Exemple 1 - Un acteur joue l'action SC - Révéler un scandale",
							"item": [
								{
									"name": "Aucune lawsuit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Aucune Lawsuit!\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).a(\"array\").empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ajout de Joe l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Dave l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Dave\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 75\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Max l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Max\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Bob l'avocat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe n'a aucune poursuite et 1000$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe n'a aucune poursuite et 1000$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const bankBalance = 1000;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Joe lance SC sur Dave",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "(Ajout de Julien) Dave a maintenant 10 pts de reputation de moins que Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Dave a perdu 10 pts de réputation de moins.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 1000;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Dave\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(59);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Dave",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Dave"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pas d'avocat pour la lawsuit SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Pas d'avocat pour la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a une lawsuit et 850$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a une lawsuit et 850$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 1000;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(69);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Pas d'avocat pour la lawsuit SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Pas d'avocat pour la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a encore une lawsuit et 700$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore une lawsuit et 700$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 850;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Max est l'agent de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max est l'agent de Joe\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Joe\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max n'a aucun contact RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max n'a aucun contact RattedIn\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max invite Bob l'avocat sur RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\" : \"Max\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/rattedin/Bob/request",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Pas d'avocat pour la lawsuit SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Pas d'avocat pour la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a encore une lawsuit et 550$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore une lawsuit et 550$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 700;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"        pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Max est en contact avec Bob sur RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max est en contact avec Bob sur RattedIn\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Bob\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob est l'avocat de la lawsuit SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est l'avocat de la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a encore une lawsuit et 400$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore une lawsuit et 400$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 550;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "(Ajout de Julien) Bob a un solde de 600$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a un solde de 600$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(600);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Toutes les lawsuits sont réglées",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Aucune Lawsuit!\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).a(\"array\").empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe n'a plus de lawsuit et il a payé Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe n'a plus de lawsuit et il a payé Bob\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 400;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"    const lawyerSalary = 100;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary - lawyerSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "(Ajout de Julien) Bob a été payé et son solde reste à 600$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob a été payé et il a un solde de 600$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(600);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Bob"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Exemple 2 - Un acteur joue l'action SC - Révéler un scandale",
							"item": [
								{
									"name": "Aucune lawsuit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Aucune Lawsuit!\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).a(\"array\").empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ajout de Joe l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Dave l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Dave\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 75\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Max l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Max\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Bob l'avocat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe n'a aucune poursuite et 1000$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe n'a aucune poursuite et 1000$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const bankBalance = 1000;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Max est l'agent de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max est l'agent de Joe\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Joe\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max n'a aucun contact RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max n'a aucun contact RattedIn\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max invite Bob l'avocat sur RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\" : \"Max\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/rattedin/Bob/request",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Max est en contact avec Bob sur RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max est en contact avec Bob sur RattedIn\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Bob\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe n'a aucune poursuite et 850$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe n'a aucune poursuite et 850$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 1000;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Joe lance SC sur Dave",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "(Ajout de Julien) Dave a maintenant 10 pts de reputation de moins que Joe Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Dave a perdu 10 pts de réputation.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 1000;\r",
													"    const looseNewTurnMoney = 2 * 100;\r",
													"    const agentSalary = 2 * 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Dave\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(53);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Dave",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Dave"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pas d'avocat pour la lawsuit SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Pas d'avocat pour la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(3);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a une lawsuit et 700$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a une lawsuit et 700$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 850;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(63);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob est l'avocat de la lawsuit SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est l'avocat de la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(3);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a encore une lawsuit et 550$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore une lawsuit et 550$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 700;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Toutes les lawsuits sont réglées",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Aucune Lawsuit!\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).a(\"array\").empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe n'a plus de lawsuit et il a payé Bob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe n'a plus de lawsuit et il a payé Bob\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 550;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"    const lawyerSalary = 100;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary - lawyerSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								}
							]
						},
						{
							"name": "Elimination et lawsuits",
							"item": [
								{
									"name": "Aucune lawsuit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Aucune Lawsuit!\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).a(\"array\").empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: 'localhost:8181/reset',\r",
													"    method: 'POST'\r",
													"}, function (err, res) {\r",
													"    // Rien à faire\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ajout de Joe l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Dave l'acteur",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Dave\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 75\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Ajout de Max l'agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Max\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe n'a aucune poursuite et 1000$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe n'a aucune poursuite et 1000$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const bankBalance = 1000;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Max est l'agent de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max est l'agent de Joe\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contains(\"Joe\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max n'a aucun contact RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max n'a aucun contact RattedIn\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe lance SC sur Dave",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe a une lawsuit et 850$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a une lawsuit et 850$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 1000;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Ajout de Bob l'avocat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/characters",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Joe lance SC sur Dave",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob n'a aucun contact et est openToWork",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la 'username' fixe a 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'status' openToWork.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob n'a aucun contact.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pas d'avocat pour les lawsuits SC de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Pas d'avocat pour la lawsuit SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(3);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a deux lawsuits et 700$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a une lawsuit et 700$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 850;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(2);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(63);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Joe lance SC sur Dave",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est toujours vide.\", function () {\r",
													"    pm.expect(pm.response.body).to.equal();\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/actions",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"actions"
											]
										},
										"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
									},
									"response": []
								},
								{
									"name": "Max invite Bob l'avocat sur RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\" : \"Max\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8181/rattedin/Bob/request",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob est en contact avec Max et est openToWork",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la 'username' fixe a 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'status' openToWork.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est en contact avec Max.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Max\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max est en contact avec Bob sur RattedIn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max est en contact avec Bob sur RattedIn\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Max\");",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Bob\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a trois lawsuits et 550$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore deux lawsuits et 550$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 700;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob est en contact avec Max et est busy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la 'username' fixe a 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'status' busy.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"busy\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est en contact avec Max.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Max\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Bob est l'avocat des trois lawsuits de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est l'avocat des lawsuits SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(3);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"    pm.expect(responseJson[2]).to.haveOwnProperty(\"turnNumber\").equal(4);\r",
													"    pm.expect(responseJson[2]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[2]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[2]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a encore trois lawsuits et 400$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore deux lawsuits et 550$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 550;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Bob est en contact avec Max et est busy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la 'username' fixe a 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'status' busy.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"busy\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est en contact avec Max.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Max\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Bob est l'avocat des deux lawsuits de Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est l'avocat des lawsuits SC de Joe\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(3);\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"turnNumber\").equal(4);\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"SC\");\r",
													"    pm.expect(responseJson[1]).to.haveOwnProperty(\"lawyerName\").equal(\"Bob\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Joe a deux lawsuits et 200$",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Joe a encore deux lawsuits et 550$\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    const oldBankBalance = 400;\r",
													"    const looseNewTurnMoney = 100;\r",
													"    const agentSalary = 50;\r",
													"    const lawyerSalary = 50;\r",
													"\r",
													"    const bankBalance = oldBankBalance - looseNewTurnMoney - agentSalary - lawyerSalary;\r",
													"\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(bankBalance);\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										},
										"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
									},
									"response": []
								},
								{
									"name": "Exécuter le tour 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								},
								{
									"name": "Joe est éliminé",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Joe"
											]
										}
									},
									"response": []
								},
								{
									"name": "Dave est éliminé",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/characters/Dave",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"characters",
												"Dave"
											]
										}
									},
									"response": []
								},
								{
									"name": "Le compte Hamstagram de Joe est retiré",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Joe",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Joe"
											]
										}
									},
									"response": []
								},
								{
									"name": "Le compte Hamstagram de Dave est retiré",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Dave",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Dave"
											]
										}
									},
									"response": []
								},
								{
									"name": "Bob ne travaille plus pour Joe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la 'username' fixe a 'Bob'.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equals(\"Bob\");\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse possède la propriété 'status' busy.\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"status\").a(\"string\").equals(\"openToWork\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bob est en contact avec Max.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a(\"array\").contains(\"Max\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/rattedin/Bob",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"rattedin",
												"Bob"
											]
										}
									},
									"response": []
								},
								{
									"name": "Max n'a plus de clients",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Max n'a plus de clients\", () => {",
													"    //parse the response JSON and test three properties",
													"    const responseJson = pm.response.json();",
													"",
													"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/hamstagram/Max",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"hamstagram",
												"Max"
											]
										}
									},
									"response": []
								},
								{
									"name": "Les lawsuits de Joe sont retirées",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Aucune Lawsuit!\", () => {\r",
													"    const responseJson = pm.response.json();\r",
													"\r",
													"    pm.expect(responseJson).a(\"array\").empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8181/lawsuits",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"lawsuits"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Actions avec lawsuit",
							"item": [
								{
									"name": "FR - Lancer une fausse rumeur",
									"item": [
										{
											"name": "Aucune lawsuit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Aucune Lawsuit!\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).a(\"array\").empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe lance FR sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a une poursuite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a une poursuite\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(69);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a maintenant 5 points de réputation de moins que Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a maintenant 5 pts de réputation de moins.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(64);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Il y a une poursuite FR envers Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Lawsuit FR pour  pour Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"FR\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PL - Plainte pour harcèlement",
									"item": [
										{
											"name": "Aucune lawsuit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Aucune Lawsuit!\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).a(\"array\").empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe lance PL sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"PL\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a une poursuite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a une poursuite\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a maintenant 10 points de réputation de moins que Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a maintenant 10 pts de réputation de moins.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(59);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Il y a une poursuite PL envers Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Une lawsuit PL pour Joe!\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"PL\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										}
									],
									"description": "Ne jamais avoir lancé de fausse rumeur auparavant."
								}
							]
						}
					]
				}
			],
			"description": "**Conditions de succès:**\n\n1. Avant un tour, toutes les actions à exécuter pendant le tour sont accumulées.\n    \n2. Lors d’un tour, toutes les actions accumulées sont exécutées.\n3. Après l’exécution d’un tour, la liste des actions à exécuter au prochain tour est vide.\n4. On conclut chaque tour en applicant les conséquences du tour.\n5. La réponse de l’exécution d’un tour doit contenir le numéro du tour en question.\n6. Après avoir été resetted, le jeu doit être au premier tour.\n7. Après un reset, tout ce qui a été créé/ajouté est effacé."
		}
	]
}