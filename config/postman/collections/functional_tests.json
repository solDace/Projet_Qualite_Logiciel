{
	"info": {
		"_postman_id": "fc9147b9-7721-44c8-9fcb-f66c8f95d07a",
		"name": "Tests fonctionnels supplémentaires (peut-être obsolètes) pour les MEP1 et MEP2",
		"description": "Liste des tests fonctionnels à exécuter avant la MEP #1!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31250954",
		"_collection_link": "https://galactic-station-425124.postman.co/workspace/Team-Workspace~f5a4ed20-e1b1-4283-8082-67b97850756f/collection/30314241-fc9147b9-7721-44c8-9fcb-f66c8f95d07a?action=share&source=collection_link&creator=31250954"
	},
	"item": [
		{
			"name": "Exemples",
			"item": [
				{
					"name": "MEP #1",
					"item": [
						{
							"name": "Story 1",
							"item": [
								{
									"name": "Ajouts/modifications à la story 1",
									"item": [
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Retourne les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 75.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Réseau social",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 10000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Désormais, à chaque tour:\n\n- Les personnages sur Hamstagram perdent automatiquement 600 abonnés\n    \n- Tous les personnages perdent 100$\n    \n- Tous les personnages perdent 6 points de réputation.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Story 2",
							"item": [
								{
									"name": "Exemple 1 - Ajout de personnage:",
									"item": [
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Not found car le tour n’a pas encore été joué",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Retourne les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 75.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(75);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									],
									"description": "On execute ici l'exemple 1 EXATEMENT comme il est présenté dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/stories/story2_ron/](https://projet2023.qualitelogicielle.ca/stories/story2_ron/)):\n\n- POST `/characters` => Ajout de Bob.\n- GET `/characters/Bob` => Not found car le tour n’a pas encore été joué.\n- POST `/turn`\n- GET `/characters/Bob` => Retourne les informations de Bob.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Exemple 2 - Ajout de personnage avec le même nom qu’un autre et un nouveau salaire",
									"item": [
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob avec nouveau salaire",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": 2000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Retourner les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 69.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(69);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 900.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(900);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "On execute ici l'exemple 2 EXATEMENT comme il est présenté dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/stories/story2_ron/](https://projet2023.qualitelogicielle.ca/stories/story2_ron/)):\n\n- POST `/characters` => Ajout de Bob.\n    \n- POST `/turn`\n    \n- POST `/characters` => Ajout de Bob.\n- POST `/turn` => L’ajout du 2e rongeur Bob sera ignoré",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Exemple 3 - Ajout de personnage avec le même nom qu’un autre",
									"item": [
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "L’ajout du 2e rongeur Bob sera ignoré",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										}
									],
									"description": "On execute ici l'exemple 3 EXATEMENT comme il est présenté dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/stories/story2_ron/](https://projet2023.qualitelogicielle.ca/stories/story2_ron/)):\n\n- POST `/characters` => Ajout de Bob.\n    \n- POST `/characters` => Ajout de Bob.\n- POST `/turn` => L’ajout du 2e rongeur Bob sera ignoré.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Élimination d'un personnage (Story 2)",
									"item": [
										{
											"name": "Ajout d'Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ALICE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_CHINCHILLA}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations d'Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Alice\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chinchilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('chinchilla');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 75.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(75);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 1000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_ALICE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('hamster');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 75.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(75);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 1000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Charlie\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('rat');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 75.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(75);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 1000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(1000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Réseau social (Alice)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Alice'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Alice\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 10000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et cette valeur est un array vide\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").length(1).contains(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et cette valeur est vide si le personnage un agent\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Réseau social (Bob)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 10000.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (3)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (4)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (5)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (6)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (7)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(7);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (8)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(8);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (9)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(9);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (10)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(10);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations d'Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Alice\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('chinchilla');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 21.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(21);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 100.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(100);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_ALICE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('hamster');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 21.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(21);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 100.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(100);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Charlie\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('rat');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 21.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(21);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 100.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(100);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Réseau social (Alice)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Alice'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Alice\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 4600.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(4600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Réseau social (Bob)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 4600.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(4600);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (11) et éliminer tous les personnages car bankAccount <= 0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(11);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "On ne trouve plus Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus son compte Hamstragram (Alice)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus son compte Hamstragram (Bob)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Si un rongeur…\n\n- Passe sous la barre des 15 pts (< 15) de réputation OU\n- Passe sous la barre des 1000 (< 1000) followers OU\n- N’a plus d’argent (bankBalance <= 0)\n    \n\nAlors au prochain tour, le rongeur sera effacé du jeu ainsi que tout ce qui le concerne (ex. compte réseau social).\n\nNote de Julien: Pour l'instant, un character est eliminé au 10ème tour car il n'aura plus assez d'argent ET de réputation. Il n'y a pas de moyen pour l'instant de tester l'élimination par < 1000 followers. Ainsi, tous les personnages sont éliminés après qu'on exécute le tour 10!",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "MEP #2",
					"item": [
						{
							"name": "Story 3",
							"item": [
								{
									"name": "(Story 3) Lorsqu’un personnage est éliminé :'( :",
									"item": [
										{
											"name": "[...], alors ses comptes RattedIn et/ou Hamstagram sont supprimés",
											"item": [
												{
													"name": "Ajout d'Alice",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.sendRequest({\r",
																	"    url: 'localhost:8181/reset',\r",
																	"    method: 'POST'\r",
																	"}, function (err, res) {\r",
																	"    // Rien à faire\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ALICE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_CHINCHILLA}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Ajout de Bob",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Ajout de Charlie",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (1)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations d'Alice",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Alice\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chinchilla' ou 'rat'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('chinchilla');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 75.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(75);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 1000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(1000);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_ALICE}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations de Bob",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('hamster');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 75.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(75);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 1000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(1000);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations de Charlie",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Charlie\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('rat');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 75.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(75);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 1000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(1000);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "Réseau social (Alice)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Alice'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Alice\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 10000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'represent' et cette valeur est un array vide\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").length(0);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'representedBy' et cette valeur est vide si le personnage un agent\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").equal(\"\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Compte RattedIn (Alice)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Réseau social (Bob)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Bob'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 10000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(10000);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (2)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (3)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (4)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (5)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (6)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (7)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(7);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (8)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(8);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (9)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(9);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (10)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(10);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations d'Alice",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Alice\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('chinchilla');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 21.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(21);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 100.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(100);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_ALICE}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations de Bob",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('hamster');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 21.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(21);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 100.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(100);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations de Charlie",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Charlie\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('rat');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égal à 21.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").to.be.equal(21);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égal à 100.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").to.be.equal(100);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "Réseau social (Alice)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Alice'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Alice\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 4600.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(4600);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Compte RattedIn (Alice)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Réseau social (Bob)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Bob'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Bob\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 4600.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(4600);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Compte RattedIn (Charlie)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Exécuter le tour (11) et éliminer tous les personnages car bankAccount <= 0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(11);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "On ne trouve plus Alice",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "On ne trouve plus Bob",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "On ne trouve plus Charlie",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "On ne trouve plus son compte Hamsagram (Alice)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Compte RattedIn (Alice)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "On ne trouve plus son compte Hamstragram (Bob)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Compte RattedIn (Charlie)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "[...], alors il n'est plus dans les contacts RattedIn des autres",
											"item": [
												{
													"name": "1. Ajouter Alice (agent)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.sendRequest({\r",
																	"    url: 'localhost:8181/reset',\r",
																	"    method: 'POST'\r",
																	"}, function (err, res) {\r",
																	"    // Rien à faire\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ALICE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_CHINCHILLA}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "2. Exécuter le tour 1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "3. Exécuter le tour 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "4. Exécuter le tour 3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "5. Exécuter le tour 4",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "6. Exécuter le tour 5",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "7. Exécuter le tour 6",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "8. Exécuter le tour 7",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "9. Exécuter le tour 8",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "10. Ajouter Charlie (avocat)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "11. Exécuter le tour 9",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "12. Charlie fait une demande de contact à Alice sur RattedIn",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"username\": \"{{CHARACTER_NAME_CHARLIE}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}/request",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}",
																"request"
															]
														}
													},
													"response": []
												},
												{
													"name": "13. Exécuter le tour 10",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "14. Obtenir les informations d'Alice",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "15. Obtenir les informations de Charlie",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "16. Obtenir les informations d’un utilisateur sur RattedIn (Alice)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Alice'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").equal('Alice');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'status' et sa valeur est égale à 'N/A'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"status\").equal('N/A');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'contacts' et c'est un array contenant la valeur 'Charlie'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a('array').contain('Charlie');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "17. Obtenir les informations d’un utilisateur sur RattedIn (Charlie)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Charlie'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").equal('Charlie');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'status' et sa valeur est égale à 'openToWork'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"status\").equal('openToWork');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'contacts' et c'est un array contenant la valeur 'Alice'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a('array').contain('Alice');\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "18. Exécuter le tour 11",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "19. Alice est éliminé",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "20. Le compte RattedIn d'Alice n'existe plus",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "21. Charlie n'a plus le Alice dans ses contact RattedIn",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Charlie'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").equal('Charlie');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'status' et sa valeur est égale à 'openToWork'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"status\").equal('openToWork');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'contacts' et c'est un array vide.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"contacts\").a('array').empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"description": "Si un rongeur…\n\n- Passe sous la barre des 15 pts (< 15) de réputation OU\n- Passe sous la barre des 1000 (< 1000) followers OU\n- N’a plus d’argent (bankBalance <= 0)\n    \n\nAlors au prochain tour, le rongeur sera effacé du jeu ainsi que tout ce qui le concerne (ex. compte réseau social).\n\nNote de Julien: Pour l'instant, un character est eliminé au 10ème tour car il n'aura plus assez d'argent ET de réputation. Il n'y a pas de moyen pour l'instant de tester l'élimination par < 1000 followers. Ainsi, tous les personnages sont éliminés après qu'on exécute le tour 10!",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Relation_Agent_Acteur",
									"item": [
										{
											"name": "Reset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/reset",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"reset"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de John l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_JOHN}}\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": {{AGENT_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber1' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"turnNumber\").a(\"number\").equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Hamstagram John 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur contient 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_JOHN_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_JOHN_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de l'actrice Suzanne",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_SUZANNE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Rob l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ROB}}\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": {{AGENT_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber2' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Hamstagram Suzanne 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Rob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Rob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_SUZANNE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_SUZANNE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram John 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur contient 'Bob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_JOHN_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_JOHN_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Rob 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Suzanne.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Suzanne\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ROB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ROB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Jean l'agent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Jean\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": {{AGENT_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de l'acteur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Hamstagram Suzanne 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Rob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Rob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_SUZANNE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_SUZANNE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram John 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est vide.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_JOHN_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_JOHN_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Rob 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Suzanne.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Suzanne\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ROB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ROB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Jean 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Bob.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Bob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Jean",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Jean"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Bob 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Jean'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Jean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de l'acteur Robert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Robert\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de l'acteur Bobby",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bobby\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Hamstagram Suzanne 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Rob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Rob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_SUZANNE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_SUZANNE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram John 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est vide.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_JOHN_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_JOHN_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Rob 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Suzanne.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Suzanne\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Robert.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Robert\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ROB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ROB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Jean 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Bob.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'represent' et sa valeur est Bobby.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"represent\").a(\"array\").contain(\"Bobby\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Jean",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Jean"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Bob 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Jean'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Jean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Robert 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Rob'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Rob\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Robert",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Robert"
													]
												}
											},
											"response": []
										},
										{
											"name": "Hamstagram Bobby 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'representedBy' et sa valeur est égale à 'Jean'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"representedBy\").a(\"string\").equal(\"Jean\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Bob"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Vérification des rats sans comptes Instagram",
									"item": [
										{
											"name": "Ajout de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Charlie\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('rat');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "On ne trouve pas de compte Hamstragram (Charlie)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Il est important de vérifier que les joueurs de type rat n'ont pas de comptes Instagram."
								},
								{
									"name": "RattedIn",
									"item": [
										{
											"name": "Une agente accepte une demande de contact",
											"item": [
												{
													"name": "Ajouter Alice (agent)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.sendRequest({\r",
																	"    url: 'localhost:8181/reset',\r",
																	"    method: 'POST'\r",
																	"}, function (err, res) {\r",
																	"    // Rien à faire\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ALICE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_CHINCHILLA}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Ajouter Charlie (avocat)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Demande de contact sur RattedIn",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"username\": \"{{CHARACTER_NAME_CHARLIE}}\"\r\n\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}/request",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}",
																"request"
															]
														}
													},
													"response": []
												},
												{
													"name": "Exécuter le tour",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations d’un utilisateur sur RattedIn (Alice)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Obtenir les informations d’un utilisateur sur RattedIn (Charlie)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Un agente refuse une demande de contact",
											"item": [
												{
													"name": "Ajouter Charlie (avocat)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.sendRequest({\r",
																	"    url: 'localhost:8181/reset',\r",
																	"    method: 'POST'\r",
																	"}, function (err, res) {\r",
																	"    // Rien à faire\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Ajouter Alice (agent)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ALICE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_CHINCHILLA}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "Exécuter le tour",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Demande de contact sur RattedIn",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"username\": \"{{CHARACTER_NAME_CHARLIE}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}/request",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}",
																"request"
															]
														}
													},
													"response": []
												},
												{
													"name": "Exécuter le tour",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "Obtenir les informations d’un utilisateur sur RattedIn (Alice)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_ALICE}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Obtenir les informations d’un utilisateur sur RattedIn (Charlie)",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"rattedin",
																"{{CHARACTER_NAME_CHARLIE}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Vérification du reset",
									"item": [
										{
											"name": "Ajout d'Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_ALICE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_CHINCHILLA}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_BOB}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_HAMSTER}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{CHARACTER_NAME_CHARLIE}}\",\r\n    \"type\": \"{{CHARACTER_TYPE_RAT}}\",\r\n    \"salary\": {{CHARACTER_STARTING_SALARY}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations d'Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Alice\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('chinchilla');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_ALICE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_ALICE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('hamster');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Charlie\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.equal('rat');\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Reset le jeu",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).that.is.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/reset",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"reset"
													]
												},
												"description": "Il doit être possible de reset le jeu, ce qui veut dire que tout ce qui aura été créé/ajouté devra être effacé."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour (1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "On ne trouve plus Alice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus Charlie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus son compte Hamstragram (Alice)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_ALICE_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_ALICE_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus son compte Hamstragram (Bob)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_BOB_HAMSTAGRAM_ID}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_BOB_HAMSTAGRAM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus le compte RattedIn (Alice)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_ALICE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_ALICE}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "On ne trouve plus le compte RattedIn (Charlie)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
															"    pm.response.to.be.notFound;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/rattedin/{{CHARACTER_NAME_CHARLIE}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"rattedin",
														"{{CHARACTER_NAME_CHARLIE}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "12. Exécuter le tour Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"La réponse est un JSON.\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.be.json;\r",
													"})\r",
													"\r",
													"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
													"    //parse the response JSON and test three properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8181/turn",
											"host": [
												"localhost"
											],
											"port": "8181",
											"path": [
												"turn"
											]
										},
										"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
									},
									"response": []
								}
							]
						},
						{
							"name": "Story 4",
							"item": [
								{
									"name": "Exemple 5 - Calcul des gains au box office (Pas testable sans pouvoir changer le nb. de followers)",
									"item": [
										{
											"name": "Ajout de Bob (Acteur)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Jane (Acteur)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Jane\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Johny (Agent)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Johny\",\r\n    \"type\": \"chinchilla\",\r\n    \"salary\": 10\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Ajout du film Chin City (type B)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Get movies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film chinCity est ajoute\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    var chinCity = pm.response.json();\r",
															"\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Jane",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Jane",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Jane"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Johny",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Johny",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Johny"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Get movies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    var chinCity = null;\r",
															"    var dentDesRongeurs = null;\r",
															"    var hamsterGames = null;\r",
															"\r",
															"    for (var i = 0; i < responseJson.length; i++) {\r",
															"        if(responseJson[i].title == \"Chin City\") {\r",
															"            chinCity = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
															"            dentDesRongeurs = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"The Hamster Games\") {\r",
															"            hamsterGames = responseJson[i];\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
															"\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
															"\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Hamster Games\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Jane",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Jane",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Jane"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de réseaux sociaux de Jane",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Jane",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Jane"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de réseaux sociaux de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Johny",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Johny",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Johny"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de réseaux sociaux de Jony",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/hamstagram/Johny",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"hamstagram",
														"Johny"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Get movies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    var chinCity = null;\r",
															"    var dentDesRongeurs = null;\r",
															"    var hamsterGames = null;\r",
															"\r",
															"    for (var i = 0; i < responseJson.length; i++) {\r",
															"        if(responseJson[i].title == \"Chin City\") {\r",
															"            chinCity = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
															"            dentDesRongeurs = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"The Hamster Games\") {\r",
															"            hamsterGames = responseJson[i];\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
															"\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\");\r",
															"\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Hamster Games\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Jane",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Jane",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Jane"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"{{CHARACTER_NAME_BOB}}"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Obtenir les informations de Jonhy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'name' et sa valeur est une string.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster' ou 'chincilla' ou 'rat'.\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"type\").to.be.oneOf(['hamster','chincilla','rat']);\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\");\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Johny",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Johny"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									]
								},
								{
									"name": "Lorsqu’un personnage est éliminé :'( (Story 4)",
									"item": [
										{
											"name": "Hedge case: Élimination d'un acteur quand il est en audition pour un film",
											"item": [
												{
													"name": "Nombre suffisant d'acteurs dans \"potentialCasting\" pour passer en tournage",
													"item": [
														{
															"name": "1. Ajout de Joe l'acteur",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.sendRequest({\r",
																			"    url: 'localhost:8181/reset',\r",
																			"    method: 'POST'\r",
																			"}, function (err, res) {\r",
																			"    // Rien à faire\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "2. Ajout de Bob l'acteur",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "3. Exécuter le tour 1",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "4. Exécuter le tour 2",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "5. Ajout de Jane l'actrice",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Jane\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "6. Ajout de Sylvie l'actrice",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Sylvie\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "7. Exécuter le tour 3",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "8. Exécuter le tour 4",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "9. Exécuter le tour 5",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "10. Exécuter le tour 6",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "11. Exécuter le tour 7",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "12. Exécuter le tour 8",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "13. Ajout du film Chin City (type B)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "14. Exécuter le tour 9",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "15. Le film Chin City ajouté",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le film est créé\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "16. Exécuter le tour 10",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "17. Chin City en auditions avec tous les acteurs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"    var dentDesRongeurs = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Sylvie\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "18. Exécuter le tour 11",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "19. Bob est éliminé (Compte bancaire vide)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																			"    pm.response.to.be.notFound;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"{{CHARACTER_NAME_BOB}}"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "20. Joe est éliminé (Compte bancaire vide)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																			"    pm.response.to.be.notFound;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Joe",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Joe"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "21. Jane a 200$ dans son compte!",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Jane'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Jane\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 27.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(27);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 200.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(200);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Jane",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Jane"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "22. Sylvie a 200$ dans son compte!",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Sylvie'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Sylvie\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 27.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(27);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 200.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(200);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Sylvie",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Sylvie"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "23. Chin City en tournage avec Jane & Sylvie",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"    var dentDesRongeurs = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
																			"            dentDesRongeurs = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Jane\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Sylvie\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "24. Exécuter le tour 12",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0)\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "25. Chin City à l'affiche",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "26. Jane a reçu son salaire (1000$)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Jane'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Jane\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 21.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(21);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1100.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1100);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Jane",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Jane"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "27 .Sylvie a reçu son salaire (1000$)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Sylvie'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Sylvie\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 21.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(21);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1100.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1100);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Sylvie",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Sylvie"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "28. Exécuter le tour 13",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "29. Chin City au box office",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(580000);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "30. Sylvie est éliminé (Réputation basse)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Sylvie",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Sylvie"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "31. Jane est éliminé (Réputation basse)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Jane",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Jane"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														}
													]
												},
												{
													"name": "Nombre insuffisant d'acteurs dans \"potentialCasting\" pour passer en tournage",
													"item": [
														{
															"name": "1. Ajout de Joe l'acteur",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.sendRequest({\r",
																			"    url: 'localhost:8181/reset',\r",
																			"    method: 'POST'\r",
																			"}, function (err, res) {\r",
																			"    // Rien à faire\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 10\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "2. Ajout de Bob l'acteur",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 11\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "3. Exécuter le tour 1",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "4. Ajout de Jane l'actrice",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Jane\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 12\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "5. Exécuter le tour 2",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "6. Exécuter le tour 3",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "7. Exécuter le tour 4",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "8. Exécuter le tour 5",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "9. Exécuter le tour 6",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(6);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "10. Exécuter le tour 7",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(7);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "11. Exécuter le tour 8",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "12. Ajout du film Chin City (type B)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "13. Exécuter le tour 9",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "14. Le film Chin City ajouté",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le film est créé!\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "15. Exécuter le tour 10",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "16. Chin City en auditions avec tous les acteurs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "17. Exécuter le tour 11",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "18. Bob est éliminé (Compte bancaire vide)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																			"    pm.response.to.be.notFound;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"{{CHARACTER_NAME_BOB}}"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "19. Joe est éliminé (Compte bancaire vide)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																			"    pm.response.to.be.notFound;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Joe",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Joe"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "20. Jane a 100$ dans son compte!",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Jane'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Jane\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 21.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(21);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 100.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(100);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Jane",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Jane"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "21. Chin City reste en auditions avec Jane",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").a(\"array\").contains(\"Jane\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "22. Exécuter le tour 12",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "23. Jane est éliminé (Compte en banque vide))",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																			"    pm.response.to.be.notFound;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/characters/Jane",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters",
																		"Jane"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "24. Chin City reste en auditions sans acteurs",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "25. Ajout de Joe l'acteur",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 10\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "26. Ajout de Bob l'acteur",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est toujours vide.\", function () {\r",
																			"    pm.expect(pm.response.body).to.equal();\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 11\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "localhost:8181/characters",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"characters"
																	]
																},
																"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
															},
															"response": []
														},
														{
															"name": "27. Exécuter le tour 13",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "28. Exécuter le tour 14",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "29. Chin City reste en auditions avec Joe et Bob",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "30. Exécuter le tour 15",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "31. Chin City en tournage avec Joe et Bob",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", function () {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Joe\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Bob\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "32. Exécuter le tour 16",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "33. Chin City à l'affiche",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														},
														{
															"name": "34. Exécuter le tour 17",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"La réponse est un JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"})\r",
																			"\r",
																			"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "localhost:8181/turn",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"turn"
																	]
																},
																"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
															},
															"response": []
														},
														{
															"name": "35. Chin City au box office",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																			"    pm.response.to.be.ok;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																			"    pm.response.to.have.header(\"Content-Type\");\r",
																			"    pm.response.to.be.json;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Le corps de la requête doit être à...\", () => {\r",
																			"    //parse the response JSON and test three properties\r",
																			"    const responseJson = pm.response.json();\r",
																			"\r",
																			"    var chinCity = null;\r",
																			"\r",
																			"    for (var i = 0; i < responseJson.length; i++) {\r",
																			"        if(responseJson[i].title == \"Chin City\") {\r",
																			"            chinCity = responseJson[i];\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																			"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(652000);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "localhost:8181/movies",
																	"host": [
																		"localhost"
																	],
																	"port": "8181",
																	"path": [
																		"movies"
																	]
																},
																"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Hedge case: Élimination d'un acteur quand il est dans un film en tournage",
											"item": [
												{
													"name": "1. Ajout de Bob l'acteur au salaire médiocre (99$)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.sendRequest({\r",
																	"    url: 'localhost:8181/reset',\r",
																	"    method: 'POST'\r",
																	"}, function (err, res) {\r",
																	"    // Rien à faire\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 99\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "2. Exécuter le tour 1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "3. Exécuter le tour 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "4. Exécuter le tour 3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "5. Exécuter le tour 4",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "6. Exécuter le tour 5",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "7. Exécuter le tour 6",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "8. Exécuter le tour 7",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "9. Ajout de Joe l'acteur (Salaire de 1000$)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 1000\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/characters",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "10. Ajout du film Chin City (type B)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est toujours vide.\", function () {\r",
																	"    pm.expect(pm.response.body).to.equal();\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "localhost:8181/movies",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"movies"
															]
														},
														"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
													},
													"response": []
												},
												{
													"name": "8. Exécuter le tour 8",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "11. Exécuter le tour 9",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "12. Le film Chin City ajouté",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le film est créé\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"\r",
																	"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																	"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																	"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																	"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																	"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/movies",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"movies"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "13. Exécuter le tour 10",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "14. Chin City en auditions avec tous les acteurs",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"\r",
																	"    var chinCity = null;\r",
																	"    var dentDesRongeurs = null;\r",
																	"\r",
																	"    for (var i = 0; i < responseJson.length; i++) {\r",
																	"        if(responseJson[i].title == \"Chin City\") {\r",
																	"            chinCity = responseJson[i];\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/movies",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"movies"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "17. Bob a seulement 100$ dans son compte en banque Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 21.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(21);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 100.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(100);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "15. Exécuter le tour 11",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "16. Chin City en tournage avec Joe & Bob",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"\r",
																	"    var chinCity = null;\r",
																	"    for (var i = 0; i < responseJson.length; i++) {\r",
																	"        if(responseJson[i].title == \"Chin City\") {\r",
																	"            chinCity = responseJson[i];\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Joe\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Bob\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/movies",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"movies"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "17. Bob a seulement 100$ dans son compte en banque",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Bob'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 21.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(21);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 100.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(100);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "17. Le réseau social de Bob",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"{{CHARACTER_NAME_BOB}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "18. Exécuter le tour 12",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "19. Chin City à l'affiche",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"\r",
																	"    var chinCity = null;\r",
																	"\r",
																	"    for (var i = 0; i < responseJson.length; i++) {\r",
																	"        if(responseJson[i].title == \"Chin City\") {\r",
																	"            chinCity = responseJson[i];\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/movies",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"movies"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "20. Bob est éliminé (Compte bancaire négatif) même après avoir reçu son salaire (99$)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '404 NOT FOUND'.\", function () {\r",
																	"    pm.response.to.be.notFound;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'error' et sa valeur est égale à 'CHARACTER_NOT_FOUND'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"error\").a(\"string\").equal(\"CHARACTER_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'description' et sa valeur est égale à 'Character not found.'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"description\").a(\"string\").equal(\"Character not found.\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/{{CHARACTER_NAME_BOB}}",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"{{CHARACTER_NAME_BOB}}"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "21. Joe a reçu son salaire (1000$)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Joe'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 57.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(57);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 1700.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(1700);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/Joe",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"Joe"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "22. Joe a 8200 followers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Joe'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 8200.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(8200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/Joe",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"Joe"
															]
														}
													},
													"response": []
												},
												{
													"name": "23. Exécuter le tour 13",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "22. Joe a 7600 followers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Joe'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 7600.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(7600);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/Joe",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"Joe"
															]
														}
													},
													"response": []
												},
												{
													"name": "24. Chin City au box office",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"\r",
																	"    var chinCity = null;\r",
																	"\r",
																	"    for (var i = 0; i < responseJson.length; i++) {\r",
																	"        if(responseJson[i].title == \"Chin City\") {\r",
																	"            chinCity = responseJson[i];\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
																	"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(570000);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/movies",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"movies"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												},
												{
													"name": "26. Exécuter le tour 14",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse est un JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"})\r",
																	"\r",
																	"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "localhost:8181/turn",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"turn"
															]
														},
														"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
													},
													"response": []
												},
												{
													"name": "25. Joe a 7000 followers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'username' et sa valeur est égale à 'Joe'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"username\").a(\"string\").equal(\"Joe\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'nbFollowers' et c'est un nombre égale à 7000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"nbFollowers\").a(\"number\").equal(7000);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/hamstagram/Joe",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"hamstagram",
																"Joe"
															]
														}
													},
													"response": []
												},
												{
													"name": "27. Joe a reçu un bonus plus petit (28500$) car Bob est éliminé et il lui reste 7000 followers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
																	"    pm.response.to.be.ok;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"    pm.response.to.be.json;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'name' et sa valeur est égale à 'Joe'.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'type' et sa valeur est égale à 'hamster'.\", () => {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"type\").a(\"string\").equal(\"hamster\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'reputationScore' et c'est un nombre égale à 45.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(45);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"La réponse possède la propriété 'bankBalance' et c'est un nombre égale à 30000.\", () => {\r",
																	"    //parse the response JSON and test three properties\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson).to.haveOwnProperty(\"bankBalance\").a(\"number\").equal(30000);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "localhost:8181/characters/Joe",
															"host": [
																"localhost"
															],
															"port": "8181",
															"path": [
																"characters",
																"Joe"
															]
														},
														"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Vérification du reset",
									"item": [
										{
											"name": "0. Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 10\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "0. Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 11\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "0. Ajout de Jane l'actrice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Jane\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 12\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "0. Ajout de Sylvie l'actrice",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Sylvie\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 13\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "0. Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "1. Ajout du film Chin City (type B)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "2. Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "3. Le film Chin City ajouté",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le film est créé\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "4. Ajout du film Les dents des rongeurs (type B)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Les dents des rongeurs\",\r\n  \"type\": \"B\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "5. Exécuter le tour 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "6. Chin City en auditions, Les dents des rongeurs ajouté",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    var chinCity = null;\r",
															"    var dentDesRongeurs = null;\r",
															"\r",
															"    for (var i = 0; i < responseJson.length; i++) {\r",
															"        if(responseJson[i].title == \"Chin City\") {\r",
															"            chinCity = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
															"            dentDesRongeurs = responseJson[i];\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Sylvie\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "7. Exécuter le tour 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(4);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "8. Chin City en tournage, Les dents des rongeurs en auditions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    var chinCity = null;\r",
															"    var dentDesRongeurs = null;\r",
															"\r",
															"    for (var i = 0; i < responseJson.length; i++) {\r",
															"        if(responseJson[i].title == \"Chin City\") {\r",
															"            chinCity = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
															"            dentDesRongeurs = responseJson[i];\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Joe\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").a(\"array\").contains(\"Bob\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Jane\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").contains(\"Sylvie\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "9. Ajout du film The Hamster Games (type A)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"The Hamster Games\",\r\n  \"type\": \"A\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "10. Exécuter le tour 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(5);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "11. Chin City à l'affiche, Les dents des rongeurs en tournage, The Hamster Games ajouté",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    var chinCity = null;\r",
															"    var dentDesRongeurs = null;\r",
															"    var hamsterGames = null;\r",
															"\r",
															"    for (var i = 0; i < responseJson.length; i++) {\r",
															"        if(responseJson[i].title == \"Chin City\") {\r",
															"            chinCity = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"Les dents des rongeurs\") {\r",
															"            dentDesRongeurs = responseJson[i];\r",
															"        }\r",
															"        if(responseJson[i].title == \"The Hamster Games\") {\r",
															"            hamsterGames = responseJson[i];\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Chin City\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(chinCity).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"title\").a(\"string\").equal(\"Les dents des rongeurs\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"type\").a(\"string\").equal(\"B\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Jane\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"casting\").a(\"array\").contains(\"Sylvie\");\r",
															"    pm.expect(dentDesRongeurs).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"title\").a(\"string\").equal(\"The Hamster Games\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"type\").a(\"string\").equal(\"A\");\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"potentialCasting\").a(\"array\").empty;\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"casting\").a(\"array\").empty;\r",
															"    pm.expect(hamsterGames).to.haveOwnProperty(\"boxOffice\").a(\"number\").equals(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "12. Reset le jeu",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).that.is.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/reset",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"reset"
													]
												},
												"description": "Il doit être possible de reset le jeu, ce qui veut dire que tout ce qui aura été créé/ajouté devra être effacé."
											},
											"response": []
										},
										{
											"name": "13. Il n'y a plus de films :(",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est vide.\", function () {\r",
															"    pm.response.json().length = 0;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/movies",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"movies"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										}
									],
									"description": "- POST `/movies` => Ajout du film Chin City (type B)\n    \n- POST `/turn`\n    \n- GET `/movies` => Le film Chin City est ajouté (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n    \n- POST `/movies` => Ajout du film Les dents des rongeurs (type B)\n    \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => en auditions (`potentialCasting`: \\[“Joe”, “Bob”, “Jane”, “Sylvie”\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n    - Les dents des rongeurs => est ajouté (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => en tournage (`potentialCasting`: \\[\\], `casting`: \\[“Joe”, “Bob”\\], `boxOffice`: 0)\n        \n    - Les dents des rongeurs => Il ne reste que Jane et Sylvie disponible en auditions (`potentialCasting`: \\[“Jane”, “Sylvie”\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n- POST `/movies` => Ajout du film The Hamster Games (type A)\n    \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => à l’affiche (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n    - Les dents des rongeurs => en tournage (`potentialCasting`: \\[\\], `casting`: \\[“Jane”, “Sylvie”\\], `boxOffice`: 0)\n        \n    - The Hamster Games est ajouté\n        \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => gains au box office (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: X)\n        \n    - Les dents des rongeurs => à l’affiche (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n    - The Hamster Games => auditions (`potentialCasting`: \\[“Joe”, “Bob”, “Jane”, “Sylvie”\\], `casting`: \\[\\], `boxOffice`: 0)\n        \n- POST `/turn`\n    \n- GET `/movies`\n    \n    - Chin City => le payload reste inchangé (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: X)\n        \n    - Les dents des rongeurs => les gains sont affichés (`potentialCasting`: \\[\\], `casting`: \\[\\], `boxOffice`: Y)\n        \n    - The Hamster Games => tournage avec Jane et Sylvie car film type A (plus grand ratio abonnés/salaire) (`potentialCasting`: \\[\\], `casting`: \\[“Jane”, “Sylvie”\\], `boxOffice`: 0)"
								}
							]
						}
					]
				},
				{
					"name": "MEP #4",
					"item": [
						{
							"name": "Actions avec lawsuit",
							"item": [
								{
									"name": "FR - Lancer une fausse rumeur",
									"item": [
										{
											"name": "Aucune lawsuit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Aucune Lawsuit!\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).a(\"array\").empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'avocat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"rat\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe lance FR sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a une poursuite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a une poursuite\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(69);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a maintenant 5 points de réputation de moins que Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a maintenant 5 pts de réputation de moins.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(64);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Il y a une poursuite FR envers Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Lawsuit FR pour  pour Joe\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"FR\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PL - Plainte pour harcèlement",
									"item": [
										{
											"name": "Aucune lawsuit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Aucune Lawsuit!\", () => {\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).a(\"array\").empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: 'localhost:8181/reset',\r",
															"    method: 'POST'\r",
															"}, function (err, res) {\r",
															"    // Rien à faire\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Ajout de Joe l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Joe\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 100\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Ajout de Bob l'acteur",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"type\": \"hamster\",\r\n    \"salary\": 150\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/characters",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe lance PL sur Bob",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est toujours vide.\", function () {\r",
															"    pm.expect(pm.response.body).to.equal();\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"PL\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8181/actions",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"actions"
													]
												},
												"description": "Dans le jeu, trois types de rongeur (⚠️ synonyme de personnage) peuvent être ajoutés:\n\n- Les hamsters, qui sont des acteurs.\n    \n- Les chinchillas, qui sont les agents des acteurs.\n    \n- Les rats, qui sont les avocats.\n    \n\nEn ajoutant un personnage, vous devez spécifier son nom, son type, et le salaire qu’il gagnera lorsqu’il aura un emploi (éventuellement dans le jeu). Le salaire doit être > 0.\n\nVous devez donner au rongeur un nom unique qui agira à titre d’identifiant (⚠️ case sensitive). Il faut ignorer tous les ajouts de personnages qui ont le même nom qu’un autre.\n\nLes personnages n’entrent dans le jeu qu’après un POST à /turn dans l’ordre chronologique d’ajout.\n\nLe pointage de réputation est initialement à 75 et le solde du compte en banque à 1000."
											},
											"response": []
										},
										{
											"name": "Exécuter le tour 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"La réponse est un JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"})\r",
															"\r",
															"pm.test(\"La réponse possède la proprité 'turnNumber' et elle est un 'number' positif incrémental.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson).to.haveOwnProperty('turnNumber').a('number').equal(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "localhost:8181/turn",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"turn"
													]
												},
												"description": "Le projet est sous forme de jeu et, à moins d’une indication contraire, tout se passe lorsqu’un tour est joué. Ainsi, le jeu doit permettre l’accumulation d’événements et d’actions. Pour l’instant, il n’existe aucun événement, aucune action, mais ils vont apparaître prochainement. Il est donc important que votre application soit prête à gérer cette fonctionnalité dès que possible.\n\nLorsque votre application recevra une requête /turn, vous devez activer le tour en exécutant tous les événements/actions accumulés dans l’ordre reçu.\n\nUne fois exécutés, les événements/actions sont retirés de la liste à exécuter. Ainsi, après chaque tour la liste doit être vide.\n\nIl est important de conserver le nombre de tours exécutés afin de savoir, lors de l’exécution de chaque tour, à quel tour nous sommes rendus. Les tours commencent au tour numéro 1. Donc, le premier /turn doit retourner \"turnNumber\": 1."
											},
											"response": []
										},
										{
											"name": "Joe a une poursuite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Joe a une poursuite\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Joe",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Joe"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Bob a maintenant 10 points de réputation de moins que Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Bob a maintenant 10 pts de réputation de moins.\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"name\").a(\"string\").equal(\"Bob\");\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"reputationScore\").a(\"number\").equal(59);\r",
															"    pm.expect(responseJson).to.haveOwnProperty(\"nbLawsuits\").a(\"number\").equal(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/characters/Bob",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"characters",
														"Bob"
													]
												},
												"description": "Dès leur entrée dans le jeu, les hamsters et les chinchillas doivent s’ouvrir un compte sur Hamstagram. Leur nom d’usager sur ce réseau social est le même que leur nom. De plus, dès leur inscription, les personnages ont d’emblée 10 000 abonnés."
											},
											"response": []
										},
										{
											"name": "Il y a une poursuite PL envers Joe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"La réponse a toujours un status '200 OK'.\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"pm.test(\"Le corps de la réponse est en JSON.\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															"\r",
															"pm.test(\"Une lawsuit PL pour Joe!\", () => {\r",
															"    //parse the response JSON and test three properties\r",
															"    const responseJson = pm.response.json();\r",
															"\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"turnNumber\").equal(2);\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"characterName\").a(\"string\").equal(\"Joe\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"actionCode\").a(\"string\").equal(\"PL\");\r",
															"    pm.expect(responseJson[0]).to.haveOwnProperty(\"lawyerName\").equal(null);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "localhost:8181/lawsuits",
													"host": [
														"localhost"
													],
													"port": "8181",
													"path": [
														"lawsuits"
													]
												}
											},
											"response": []
										}
									],
									"description": "Ne jamais avoir lancé de fausse rumeur auparavant."
								}
							]
						}
					]
				}
			],
			"description": "On execute ici les tests EXATEMENT comme ils sont présentés dans l'énoncé du projet de session ([https://projet2023.qualitelogicielle.ca/](https://projet2023.qualitelogicielle.ca/))"
		}
	]
}